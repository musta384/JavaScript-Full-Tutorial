
This is a **complete asynchronous data fetching and UI management code** that demonstrates how to:
‚úÖ Fetch and cache API data,
‚úÖ Handle loading and error states,
‚úÖ Escape HTML for security,
‚úÖ Handle network changes,
‚úÖ Manage UI dynamically.

Let‚Äôs go through it **line by line (and concept by concept)** üëá

---

## üß© PART 1 ‚Äî Fetching and displaying posts

```js
async function fetchPosts() {
```

* Declares an **asynchronous function** named `fetchPosts`.
* The `async` keyword allows the use of `await` inside the function for asynchronous operations (like fetching data).

---

```js
  const postCache = new Map();
```

* Creates a new **Map** to cache fetched posts.
* A `Map` stores key-value pairs; here, the post `id` will be the key, and the full post object will be the value.

---

```js
  showLoadingIndicator('posts', 'Loading posts...');
```

* Calls a helper function that displays a **loading spinner** inside the HTML container with ID `posts`.
* It tells the user that posts are being loaded.

---

```js
  try {
```

* Starts a `try` block to catch any possible errors during the fetch process.

---

```js
    const response = await fetch("https://jsonplaceholder.typicode.com/posts");
```

* Uses the **Fetch API** to send a network request to a test endpoint (JSONPlaceholder).
* The `await` keyword pauses the function until the response arrives.

---

```js
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
```

* Checks if the HTTP response is not OK (status not in 200‚Äì299).
* If it‚Äôs not OK, throws an `Error` that will be caught later.

---

```js
    const posts = await response.json();
```

* Converts the response body (which is JSON text) into a JavaScript object or array using `.json()`.
* `await` waits for the parsing to complete.

---

```js
    if (!posts || posts.length === 0) {
      showEmptyState('posts', 'No posts found.');
      return;
    }
```

* Handles the case when there are no posts.
* Shows a message ‚ÄúNo posts found‚Äù using a helper function.
* The `return` exits the function early.

---

```js
    posts.forEach(post => postCache.set(post.id, post));
```

* Loops through each post and stores it in the cache with `post.id` as the key.

---

```js
    const list = posts.slice(0, 5).map(p => `
      <div class="post" data-id="${p.id}">
        <h3>${p.title}</h3>
        <p>${p.body.substring(0, 100)}...</p>
      </div>
    `).join("");
```

* Takes only the first 5 posts with `.slice(0, 5)`.
* Uses `.map()` to create HTML for each post.
* Each post:

  * Is wrapped in a `<div>` with class `post` and a `data-id` attribute (to know which post was clicked later).
  * Shows the title and first 100 characters of the body.
* `.join("")` concatenates all post strings into one big HTML string.

---

```js
    document.getElementById("posts").innerHTML = list;
```

* Inserts the generated HTML into the `<div id="posts">` container in the page.

---

```js
    hideLoadingIndicator('posts');
```

* Hides the loading spinner now that data has been loaded.

---

```js
    document.querySelectorAll(".post").forEach(post => {
      post.addEventListener("click", async () => {
        await showPostDetails(post, postCache);
      });
    });
```

* Selects all elements with the class `.post`.
* For each one, adds a `click` event listener.
* When clicked, it calls `showPostDetails()` to show more information about that post.
* Passes both the clicked element and the cache.

---

```js
  } catch (err) {
    hideLoadingIndicator('posts');
    showError('posts', `Failed to load posts: ${err.message}`);
    console.error('Error fetching posts:', err);
  }
```

* The `catch` block handles any error during the process:

  * Hides the spinner.
  * Displays an error message in the UI.
  * Logs the error to the console for debugging.

---

## üß© PART 2 ‚Äî Showing post details

```js
async function showPostDetails(postElement, postCache) {
```

* Defines an async function to show details for a clicked post.

---

```js
  const id = postElement.dataset.id;
```

* Reads the `data-id` attribute from the clicked post‚Äôs `<div>` (a way to store custom data in HTML).

---

```js
  showLoadingIndicator('details', 'Loading post details...');
```

* Shows a loading spinner in the `details` section.

---

```js
  try {
    let postDetails;
```

* Starts a `try` block for error handling and declares a variable to hold the post details.

---

```js
    if (postCache.has(Number(id))) {
      postDetails = postCache.get(Number(id));
      console.log('Loaded from cache:', id);
```

* Checks if the post is already in the cache.
* If yes, retrieves it from there (avoiding another network request).

---

```js
    } else {
      const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);
```

* Otherwise, fetches that specific post from the API using its ID.

---

```js
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
```

* Handles HTTP errors again.

---

```js
      postDetails = await response.json();
      postCache.set(postDetails.id, postDetails);
      console.log('Fetched from API and cached:', id);
```

* Parses the JSON.
* Adds the post to the cache.
* Logs that it came from the API.

---

```js
    hideLoadingIndicator('details');
    document.getElementById("details").innerHTML = `
      <div class="details">
        <h3>${escapeHtml(postDetails.title)}</h3>
        <p>${escapeHtml(postDetails.body)}</p>
        <small>Post ID: ${postDetails.id}, User ID: ${postDetails.userId}</small>
      </div>
    `;
```

* Hides the spinner and displays the post details.
* Uses `escapeHtml()` for security to prevent HTML injection (XSS attacks).

---

```js
  } catch (err) {
    hideLoadingIndicator('details');
    showError('details', `Failed to load post details: ${err.message}`);
    console.error('Error fetching post details:', err);
  }
```

* Catches and displays errors if fetching details fails.

---

## üß© PART 3 ‚Äî Utility functions

### Loading indicator

```js
function showLoadingIndicator(containerId, message = 'Loading...') {
  const container = document.getElementById(containerId);
  container.innerHTML = `
    <div class="loading-indicator">
      <div class="spinner"></div>
      <p>${message}</p>
    </div>
  `;
}
```

* Displays a spinner with a message inside a specified container.

---

```js
function hideLoadingIndicator(containerId) {
  const container = document.getElementById(containerId);
  const loadingIndicator = container.querySelector('.loading-indicator');
  if (loadingIndicator) {
    loadingIndicator.remove();
  }
}
```

* Finds and removes the loading spinner from the DOM.

---

### Error message

```js
function showError(containerId, message) {
  const container = document.getElementById(containerId);
  container.innerHTML = `
    <div class="error-message">
      <span style="color: red;">‚ùå</span>
      <p>${message}</p>
      <button onclick="fetchPosts()" class="retry-btn">Try Again</button>
    </div>
  `;
}
```

* Shows an error box with a message and a retry button.

---

### Empty state

```js
function showEmptyState(containerId, message) {
  const container = document.getElementById(containerId);
  container.innerHTML = `
    <div class="empty-state">
      <span style="color: #666;">üìù</span>
      <p>${message}</p>
    </div>
  `;
}
```

* Displays a message for when no data is available.

---

### HTML escaping

```js
function escapeHtml(unsafe) {
  if (typeof unsafe !== 'string') return unsafe;
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}
```

* Escapes special HTML characters to prevent XSS (cross-site scripting).
* Converts characters like `<`, `>`, `&`, `"`, and `'` into safe HTML entities.

---

### Fetch with timeout

```js
function fetchWithTimeout(url, options = {}, timeout = 8000) {
  return Promise.race([
    fetch(url, options),
    new Promise((_, reject) =>
      setTimeout(() => reject(new Error('Request timeout')), timeout)
    )
  ]);
}
```

* Wraps `fetch()` in a **timeout mechanism**.
* Uses `Promise.race()` ‚Äî whichever promise finishes first (fetch or timeout) wins.
* If the fetch takes longer than `timeout` milliseconds, it rejects.

---

### Network status checker

```js
function checkNetworkStatus() {
  if (!navigator.onLine) {
    showError('posts', 'No internet connection. Please check your network.');
    return false;
  }
  return true;
}
```

* Checks whether the user is online using `navigator.onLine`.
* If offline, shows an error and returns `false`.

---

### Enhanced fetchPosts (not fully implemented)

```js
async function fetchPostsEnhanced() {
  if (!checkNetworkStatus()) return;
  const response = await fetchWithTimeout("https://jsonplaceholder.typicode.com/posts");
  // ... rest of the implementation
}
```

* A planned enhancement that combines the network check and timeout feature with the main fetch function.

---

## üß© PART 4 ‚Äî App initialization

```js
document.addEventListener('DOMContentLoaded', function () {
  fetchPosts();
```

* Waits until the HTML document is fully loaded, then calls `fetchPosts()` to start loading posts.

---

```js
  window.addEventListener('online', function () {
    const errorElements = document.querySelectorAll('.error-message');
    if (errorElements.length > 0) {
      fetchPosts();
    }
  });
});
```

* Listens for the browser's `online` event (when internet returns).
* If there was a previous error displayed, it automatically retries fetching the posts.

---

## ‚ö° Summary

| Feature                  | Purpose                             |
| ------------------------ | ----------------------------------- |
| `fetchPosts()`           | Loads posts list and caches them    |
| `showPostDetails()`      | Loads or retrieves post details     |
| `showLoadingIndicator()` | Shows a loading UI                  |
| `showError()`            | Displays an error and retry button  |
| `escapeHtml()`           | Protects against XSS                |
| `fetchWithTimeout()`     | Cancels slow requests               |
| `checkNetworkStatus()`   | Checks internet connectivity        |
| `DOMContentLoaded` event | Initializes app when ready          |
| `window.online` event    | Refetches data when network is back |

---


